{"version":3,"sources":["D3Chart.js","ChartWrapper.js","GenderDropdown.js","App.js","serviceWorker.js","index.js"],"names":["MARGIN","HEIGHT","WIDTH","D3Chart","element","ins","this","svg","d3","append","attr","xAxisCaption","text","xAxisGroup","yAxisGroup","Object","freeze","flag","vis","caption","data","y","domain","d","height","range","x","map","name","padding","xAxisCall","transition","duration","call","yAxisCall","rects","selectAll","exit","remove","bandwidth","enter","gender","chart","useRef","useEffect","update","ref","dom","genderSelected","Dropdown","Toggle","variant","id","Menu","Item","onSelect","App","useState","state","setState","className","Navbar","bg","Brand","Container","Row","Col","xs","GenderDropdown","ChartWrapper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SACMA,EAAgB,GAAhBA,EAA4B,GAA5BA,EAAqC,GAArCA,EAAgD,GAChDC,EAAS,IAAMD,EAAaA,EAC5BE,EAAQ,IAAMF,EAAcA,EAGbG,E,WACjB,WAAYC,EAASC,GACjB,GADuB,oBACpBF,EAAQE,aAAgBF,EACvB,OAAOA,EAAQE,GAEnBC,KAAKC,IAAMC,IAAUJ,GACpBK,OAAO,OACHC,KAAK,QAASR,EAAQF,EAAcA,GACpCU,KAAK,SAAUT,EAASD,EAAaA,GACzCS,OAAO,KACHC,KAAK,YALC,oBAKyBV,EALzB,aAKyCA,EALzC,MAOXM,KAAKK,aAAeL,KAAKC,IAAIE,OAAO,QACnCC,KAAK,IAAKR,EAAM,GAChBQ,KAAK,IAAKT,EAAO,IACjBS,KAAK,cAAe,UACpBE,KAAK,eAENN,KAAKC,IAAIE,OAAO,QACXC,KAAK,KAAM,IACXA,KAAK,KAAOT,EAAO,GACnBS,KAAK,cAAe,UACpBE,KAAK,gBACLF,KAAK,YALV,eAOAJ,KAAKO,WAAaP,KAAKC,IAAIE,OAAO,KACjCC,KAAK,YADY,uBACiBT,EADjB,MAGlBK,KAAKQ,WAAaR,KAAKC,IAAIE,OAAO,KAClCM,OAAOC,OAAOV,MACdH,EAAQE,GAAOC,K,mDAINW,G,6FACLC,EAAMZ,KACNa,EAAUF,EAAO,cAAe,gB,mBAEnBT,IAASS,EAvCtB,yDAuCkC,6D,OAAlCG,E,OACNF,EAAIP,aAAaC,KAAKO,GACpBE,EAAIb,MACRc,OAAO,CACuB,IAA9Bd,IAAOY,GAAM,SAAAG,GAAC,OAAIA,EAAEC,UACpBhB,IAAOY,GAAM,SAAAG,GAAC,OAAKA,EAAEC,YAErBC,MAAM,CAACxB,EAAQ,IAEXyB,EAAIlB,MACRc,OAAOF,EAAKO,KAAI,SAAAJ,GAAC,OAAIA,EAAEK,SACvBH,MAAM,CAAC,EAAGvB,IACV2B,QAAQ,IAEJC,EAAYtB,IAAckB,GAChCR,EAAIL,WAAWkB,aAAaC,SAAS,KAAKC,KAAKH,GAEzCI,EAAY1B,IAAYa,GAC9BH,EAAIJ,WAAWiB,aAAaC,SAAS,KAAKC,KAAKC,IAGzCC,EAAQjB,EAAIX,IAAI6B,UAAU,QAC9BhB,KAAKA,IAGKiB,OACLN,aAAaC,SAAS,KACtBtB,KAAK,UAAU,SAAAa,GAAC,OAAI,KAC1Bb,KAAK,KAAK,SAAAa,GAAC,OAAItB,KACTqC,SAGPH,EAAMJ,aAAaC,SAAS,KAC1BtB,KAAK,KAAK,SAAAa,GAAC,OAAIG,EAAEH,EAAEK,SACnBlB,KAAK,KAAK,SAAAa,GAAC,OAAIF,EAAEE,EAAEC,WACnBd,KAAK,QAASgB,EAAEa,WAChB7B,KAAK,UAAU,SAAAa,GAAC,OAAItB,EAASoB,EAAEE,EAAEC,WAGnCW,EAAMK,QAAQ/B,OAAO,QACnBC,KAAK,KAAK,SAAAa,GAAC,OAAIG,EAAEH,EAAEK,SACnBlB,KAAK,QAASgB,EAAEa,WACP7B,KAAK,OAAQ,QACbA,KAAK,IAAKT,GACV8B,aAAaC,SAAS,KAClBtB,KAAK,UAAU,SAAAa,GAAC,OAAItB,EAASoB,EAAEE,EAAEC,WACjCd,KAAK,KAAK,SAAAa,GAAC,OAAIF,EAAEE,EAAEC,W,yDCtFrB,cAAc,IAAZiB,EAAW,EAAXA,OACTC,EAAQC,iBAAO,MAOnB,OALAC,qBAAU,WACO,IAAIzC,EAAQuC,EAAO,UACrBG,OAAmB,QAAXJ,MAInB,oCACI,yBAAMK,IAAK,SAACC,GAASL,EAAQK,O,QCX1B,kBAAEC,EAAF,EAAEA,eAAF,OACX,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUC,GAAG,kBAAtC,wBAIA,kBAACH,EAAA,EAASI,KAAV,KACI,kBAACJ,EAAA,EAASK,KAAV,CAAeC,SAAU,kBAAIP,EAAe,SAA5C,OACA,kBAACC,EAAA,EAASK,KAAV,CAAeC,SAAU,kBAAIP,EAAe,WAA5C,YCyBGQ,MA7Bf,WAAgB,IAAD,EACaC,mBAAS,CAAChB,OAAQ,QAD/B,mBACNiB,EADM,KACCC,EADD,KAOb,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,GAAG,SACT,kBAACD,EAAA,EAAOE,MAAR,mBAEF,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACC,EAAD,CAAgBpB,eAZH,SAACP,GACtBkB,EAAS,CAAClB,gBAeN,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACE,EAAD,CAAc5B,OAAQiB,EAAMjB,cChBpB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d331f0e8.chunk.js","sourcesContent":["import * as d3 from 'd3';\nconst MARGIN = { TOP: 10, BOTTOM: 50, LEFT:50, RIGHT: 10};\nconst HEIGHT = 500 - MARGIN.TOP - MARGIN.BOTTOM;\nconst WIDTH = 800 - MARGIN.LEFT - MARGIN.RIGHT;\n\nconst url = 'https://udemy-react-d3.firebaseio.com/tallest_men.json';\nexport default class D3Chart {\n    constructor(element, ins) {\n        if(D3Chart[ins] instanceof D3Chart){\n            return D3Chart[ins];\n        };\n        this.svg = d3.select(element)\n        .append('svg')\n            .attr('width', WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n            .attr('height', HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n        .append('g')\n            .attr('transform', `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n\n        this.xAxisCaption = this.svg.append('text')\n        .attr('x', WIDTH/2)\n        .attr('y', HEIGHT+40)\n        .attr('text-anchor', 'middle')\n        .text('Tallest Men');\n\n        this.svg.append('text')\n            .attr('y', -30)\n            .attr('x', - HEIGHT/2)\n            .attr('text-anchor', 'middle')\n            .text('Height in cm')\n            .attr('transform', `rotate(-90)`)\n        \n        this.xAxisGroup = this.svg.append('g')\n        .attr('transform', `translate(0, ${HEIGHT})`)\n\n        this.yAxisGroup = this.svg.append('g');\n        Object.freeze(this);\n        D3Chart[ins] = this;\n\n    }\n\n    async update(flag) { \n      const vis = this;\n      const caption = flag ? 'Tallest Men': 'Tallest women';\n      \n      const data = await d3.json( flag ? url: 'https://udemy-react-d3.firebaseio.com/tallest_women.json');\n      vis.xAxisCaption.text(caption);\n\t\tconst y = d3.scaleLinear()\n\t\t\t.domain([\n\t\t\t\td3.min(data, d => d.height) * 0.95, \n\t\t\t\td3.max(data, d =>  d.height)\n\t\t\t])\n\t\t\t.range([HEIGHT, 0])\n\n\t\tconst x = d3.scaleBand()\n\t\t\t.domain(data.map(d => d.name))\n\t\t\t.range([0, WIDTH])\n\t\t\t.padding(0.4)\n\n\t\tconst xAxisCall = d3.axisBottom(x)\n\t\tvis.xAxisGroup.transition().duration(500).call(xAxisCall)\n\n\t\tconst yAxisCall = d3.axisLeft(y)\n\t\tvis.yAxisGroup.transition().duration(500).call(yAxisCall)\n\n\t\t// DATA JOIN\n\t\tconst rects = vis.svg.selectAll(\"rect\")\n\t\t\t.data(data)\n\n\t\t// EXIT\n        rects.exit()\n        .transition().duration(500)\n        .attr(\"height\", d => 0)\n\t\t.attr(\"y\", d => HEIGHT)\n        .remove()\n\n\t\t// UPDATE\n\t\trects.transition().duration(500)\n\t\t\t.attr(\"x\", d => x(d.name))\n\t\t\t.attr(\"y\", d => y(d.height))\n\t\t\t.attr(\"width\", x.bandwidth)\n\t\t\t.attr(\"height\", d => HEIGHT - y(d.height))\n\n\t\t// ENTER\n\t\trects.enter().append(\"rect\")\n\t\t\t.attr(\"x\", d => x(d.name))\n\t\t\t.attr(\"width\", x.bandwidth)\n            .attr(\"fill\", \"grey\")\n            .attr('y', HEIGHT)\n            .transition().duration(500)\n                .attr(\"height\", d => HEIGHT - y(d.height))\n                .attr(\"y\", d => y(d.height))\n        }\n}","import React, {useEffect, useRef} from 'react';\nimport D3Chart from './D3Chart';\n\n\nexport default ({gender})=> {\n    let chart = useRef(null);\n    let checkChart;\n    useEffect(()=>{\n        checkChart = new D3Chart(chart, 'chart1');\n        checkChart.update((gender === 'men' ? true: false));\n    });\n\n    return (\n        <>\n            <div  ref={(dom) => {chart = dom}} />\n        </>\n        );\n}","import React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nexport default ({genderSelected}) => (\n    <Dropdown>\n        <Dropdown.Toggle variant='primary' id='dropdown-basic'>\n            Please Select gender\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n            <Dropdown.Item onSelect={()=>genderSelected('men')} >Men</Dropdown.Item>\n            <Dropdown.Item onSelect={()=>genderSelected('women')} >Women</Dropdown.Item>\n        </Dropdown.Menu>\n    </Dropdown>\n)","import React, {useState} from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ChartWrapper from './ChartWrapper';\nimport GenderDropdown from './GenderDropdown';\nfunction App() {\n  const [state, setState] = useState({gender: 'men'});\n\n  const genderSelected = (gender) =>{\n    setState({gender});\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"light\">\n        <Navbar.Brand>Bar chart</Navbar.Brand>\n      </Navbar>\n      <Container>\n        <Row>\n          <Col xs={12}>\n            <GenderDropdown genderSelected={genderSelected}/>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={12}>\n            <ChartWrapper gender={state.gender}/>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}